#+STARTUP: content

* emacs config


** Learning
*** Examples of emacs config

 - https://github.com/rememberYou/.emacs.d/blob/master/config.org
 - https://wolfecub.github.io/dotfiles/
 - https://github.com/gilbertw1/emacs-literate-starter/blob/master/emacs.org
 - https://github.com/emacs-tw/awesome-emacs
 - https://github.com/munen/emacs.d/ (from presentation https://www.youtube.com/watch?v=gfZDwYeBlO4)
 - https://matthewbauer.us/bauer/
 - https://github.com/angrybacon/dotemacs
 - https://github.com/akirak/emacs.d (Very good with a lot of things, but not many languages)
 - https://github.com/dholm/dotemacs (With a lot of layers and a lot of interesting things)


*** Emacs editor movement to remember

**** Movement
    - C-a, C-e: Begining/end of the line
    - M-a, M-e: Begining/end of a sentence
    - M-d     : Kill word (forward until next change of word
    - M-- M-d : Kill word (but backwards because the M-- means modifier -1)
    -

**** Interesting Keybinding
    - M-;: Comment
    - F3 : Start Macro
    - F4 : Stops Macro
    - C-x z: Repeat last command (press z again without C-x to repeat)
    - C-M-i: Auto complete
    - C-SPC: Starts a region and adds a mark
    - C-x C-x: swaps cursor and mark
    - C-x C-e: Execute sexp after the cursor
    - . on dired mode: Shows dired hydra help menu

**** Help - Describe
    - C-h f: Describe function
    - C-h m: Describe mode
    - C-h k: Describe key
    - C-h v: Describe variablle

**** Concepts

***** DWIM (Do What I Mean)

https://www.emacswiki.org/emacs/DoWhatIMean#DWIM

For example when setted the `dired-dwim-target` variable, if you have two windows with dired
and copy/move a file, will do directly with the other window. Because assumes that's what you want

#+BEGIN_SRC emacs-lisp

(setq dired-dwim-target t)


#+END_SRC

***** Narrow

C-x n n: Narrow to region, means that temporary you only see the region on the current buffer
C-x n w: Widen the region

***** Register

https://www.gnu.org/software/emacs/manual/html_node/emacs/Bookmarks.html

Bookmarks are cursor positions stored, like in register but are persisted
between emacs sessions

By default bookmarks are at C-x r, but for me it better to have them at C-c b

C-c b b: set bookmark

C-c b j: Go to a bookmark

C-c b l: Show list of bookmarks

#+BEGIN_SRC emacs-lisp :tangle yes

  (global-set-key (kbd "C-c b j") 'bookmark-jump)

  (global-set-key (kbd "C-c b b") 'bookmark-set)

  (global-set-key (kbd "C-c b l") 'bookmark-bmenu-list)

#+END_SRC

****** Windows

You can save your window-configurations:

window-configuration-to-register C-x r w

and restore it later:

jump-to-register C-x r j

***** Org babel

1. <s <TAB> expands a code region :)

2. Inside a code region you can press C-c ' and the code will open in another windw
   with proper identation color etc...

**** SEXPS

 - C-M (left/right) => go to next sexp
 - C-M (Up/Down)    => goes deeper into the sexp
 - C-M h            => Mark until begining of next defun
 - C-M a / e        => Begining/End of defun


** config


*** Set GC

#+BEGIN_SRC emacs-lisp :tangle yes

(setq gc-cons-threshold 20000000)

#+END_SRC!

*** COMMENT use-package
Configure use-package to install next package

#+BEGIN_SRC emacs-lisp :tangle yes
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

(package-initialize)

;; install use-package if not installed
(unless (require 'use-package nil t)
    (package-refresh-contents)
    (package-install 'use-package)
    (require 'use-package))

;; install package if not already in
(setq use-package-always-ensure t)
#+END_SRC

*** Straight

Allow to install from github
#+BEGIN_SRC emacs-lisp

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))

(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

(straight-use-package 'use-package)

(setq straight-use-package-by-default t)

#+END_SRC

*** Not Temp files plz!

#+BEGIN_SRC emacs-lisp :tangle yes

(setq make-backup-files nil)

(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))

(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

#+END_SRC

*** Dimish

Diminish is used to no clutter the bottom bar with all the, one cool thing is that while
using use-package, you can add a :diminish to hide it directly

https://github.com/myrjola/diminish.el
#+BEGIN_SRC emacs-lisp :tangle yes

(use-package diminish)

#+END_SRC

*** Basic editing and UI
Configure basic UI, remove menu, scrollbar etc...

#+BEGIN_SRC emacs-lisp :tangle yes
(if (display-graphic-p)
    (progn
      (menu-bar-mode -1)
      (toggle-scroll-bar -1)
      (tool-bar-mode -1)))

(defalias 'yes-or-no-p 'y-or-n-p)

#+END_SRC


Also no use of tabs....

#+BEGIN_SRC emacs-lisp :tangle yes

  (setq-default indent-tabs-mode nil)

  (setq
   mouse-yank-at-point t
   scroll-margin 4                                 ; Add a margin when scrolling vertically
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace t
   help-window-select t                             ; Focus new help windows when opened
   )


#+END_SRC

End/Home keys to begining and end of the line :)

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "<home>") 'beginning-of-line)
(global-set-key (kbd "<end>") 'end-of-line)

#+END_SRC


And highlight current line :)

#+BEGIN_SRC emacs-lisp :tangle yes
(global-hl-line-mode +1)
#+END_SRC

*** COMMENT IDO
>>>>>>> 8764e49f38b0ab4868f3e1c57dec5733e92f8c5b

Commented because I'm using Ivy now :)

IDO (Interactive DO) https://www.gnu.org/software/emacs/manual/html_mono/ido.html)

is already built in into the Emacs system... it helps you when there are multiple options
on the mini-buffer of emacs such as find-file or switch-buffer


#+BEGIN_SRC emacs-lisp :tangle yes
;; Since is already in we don't need to use-package it

(ido-mode 1)
(ido-everywhere 1)
#+END_SRC

*** Ivy + Counsel

#+BEGIN_SRC emacs-lisp :tangle yes

  ;; ivy
  (use-package ivy
    :ensure t
    :diminish
    :config
    (ivy-mode 1)

    (setq ivy-re-builders-alist
          '((swiper . ivy--regex-plus)
            (t      . ivy--regex-fuzzy)))
    (bind-key "C-c C-r" 'ivy-resume))

  ;; counsel
  (use-package counsel
    :ensure t
    :bind
    ("M-x" . counsel-M-x)
    ("C-h f" . counsel-describe-function)
    ("C-h v" . counsel-describe-variable))


  (use-package smex
    :init (smex-initialize))
#+END_SRC

*** Projectile

Projectile (https://github.com/bbatsov/projectile)

Allow you to do find-file and search inside your project only

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package projectile
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (setq projectile-completion-system 'ivy)
    (projectile-register-project-type 'npm '("package.json")
                                         :compile "npm install"
                                         :test "npm test"
                                         :run "npm start"
                                         :test-dir "tests"
                                         :test-suffix ".test"))

#+END_SRC

*** OSX

#+BEGIN_SRC emacs-lisp :tangle yes
;; key bindings
(when (eq system-type 'darwin) ;; mac specific settings
(setq mac-option-modifier 'alt)
(setq mac-command-modifier 'meta)
(global-set-key [kp-delete] 'delete-char) ;; sets fn-delete to be right-delete
(setq mac-right-option-modifier 'none))


#+END_SRC

*** Load theme

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package leuven-theme
:init (load-theme 'leuven t))

#+END_SRC

*** Clipboard

Make copy and paste from the clipboard work on emacs
from: http://ergoemacs.org/emacs/emacs_x11_sync_clipboard.html

#+BEGIN_SRC emacs-lisp :tangle yes

;; after copy Ctrl+c in Linux X11, you can paste by `yank' in emacs
(setq x-select-enable-clipboard t)

;; after mouse selection in X11, you can paste by `yank' in emacs
(setq x-select-enable-primary t)

#+END_SRC

*** C-TAB and C-S-Tab go to next window

C-Tab goes to other-window

#+BEGIN_SRC emacs-lisp :tangle yes
    (require 'bind-key)
    (bind-key "<C-tab>" 'other-window)
    (bind-key "<C-iso-lefttab>" (lambda ()
    (interactive)
      (other-window -1)))

  (with-eval-after-load 'magit-mode
    (define-key magit-mode-map (kbd "<C-tab>") nil))

  (defun kzk/org-unbind-tab ()
    (message "unbinding tab on org mode")
    (define-key org-mode-map (kbd "<C-tab>") nil))

  (when (boundp 'org-mode-map)
    (kzk/org-unbind-tab))

  (with-eval-after-load 'org-mode 'kzk/org-unbind-tab)



#+END_SRC


*** Which Key

Which key is a minor mode that allow you to see which keystrokes are available after a prefix

For example: when you press C-c, after a second it would show up what are the next keybinding you can use

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package which-key
  :diminish
  :config
  (setq which-key-idle-delay 0.2)
  (which-key-mode))


#+END_SRC

*** Undo tree

Undo tree allow you yo see how to undo/redo

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package undo-tree
  :diminish
  :bind (
  ("C-z" . undo)
  ("C-c _" . undo-tree-visualize)
  ("C-S-z" . undo-tree-redo))
  :config
  (global-undo-tree-mode 1))

#+END_SRC

*** GIT!
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package magit
  :bind (("C-c g" . magit-status)))
#+END_SRC

*** Expand Region

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package expand-region
  :ensure
  :bind
  (("C-+" . er/expand-region)
  ("C-M-+" . er/contract-region)))


#+END_SRC

*** Multiple cursors
https://github.com/magnars/multiple-cursors.el

Multiple cursors allow you to change multiple parts of the file that share some text

#+BEGIN_SRC emacs-lisp :tangle yes
(use-package multiple-cursors
  :bind
  (("C-S-c c" . mc/mark-all-like-this-dwim)
  ("C-S-c r" . mc/mark-previous-like-this)
  ("C->" . mc/mark-next-like-this)
  ("C-<" . mc/mark-previous-like-this)
  ("C-S-c C-S-c" . mc/edit-lines)))

#+END_SRC

Since yet not fluent.... I have a hydra menu

C-c m c (Menu for cursors) allow you to open this menu

- n/p: to add a new cursor on next line
- N/P: skip next line to add a cursor
- a: (mark-all) will use the region as a search and add a cursor for each match
- r: does the same but with an regex on the current region
- C-Shift-c C-Shift-c: Add a cursor at the beginning of each line in the

*** Winner mode

Winner mode allow you to undo window open/close configuration etc...

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package winner
  :diminish
  :config
  (winner-mode 1)
  :bind
  (("C-c w _" . winner-undo)
   ("C-c w -" . winner-redo)))

#+END_SRC

*** Eshell Configuration

    Copied from https://github.com/csand/emacs.d/blob/c6a2f45a62ddf498ac5f5d784d5f90ba155c35ea/init/init-eshell.el

    Visual commands is a way to say to eshell, for specific commands use ansi-term, and that's is necessary
    because if not, the tty is not attached and you can not use interactive command
#+BEGIN_SRC emacs-lisp :tangle yes


(use-package eshell
  :init
  (progn
    (setq
     eshell-hist-ignoredups t
     eshell-save-history-on-exit t
     eshell-prefer-lisp-functions t
     eshell-destroy-buffer-when-process-dies t))
  :config
  (add-to-list 'eshell-modules-list 'eshell-tramp))

;; Visual Commands
(add-hook 'eshell-mode-hook
              (lambda ()
                (add-to-list 'eshell-visual-commands "ssh")
                (add-to-list 'eshell-visual-commands "tail")
                (add-to-list 'eshell-visual-commands "docker")
                (add-to-list 'eshell-visual-commands "top")))

;; Aliases
(add-hook 'eshell-mode-hook
          (lambda ()
            (eshell/alias "e" "find-file $1")
            (eshell/alias "ff" "find-file $1")
            (eshell/alias "emacs" "find-file $1")
            (eshell/alias "ee" "find-file-other-window $1")))

#+END_SRC

*** Smart parens

#+BEGIN_SRC emacs-lisp :tangle yes

  (show-paren-mode 1)

  (setq show-paren-style 'expression)

#+END_SRC

*** Hydra menus


#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package hydra
    :after dired
    :defer 2
    :config
    (define-key dired-mode-map "." 'hydra-dired/body)
    :bind (("C-c m w" . hydra-windows/body)
           ("C-c m c" . multiple-cursors-hydra/body)
           ("C-c m o" . hydra-org)))

#+END_SRC

**** Windows
  #+BEGIN_SRC emacs-lisp :tangle yes

  (defhydra hydra-windows (:color pink)
    "
    ^
    ^Windows^           ^Window^            ^Zoom^
    ^───────^───────────^──────^────────────^────^──────
    _q_ quit            _b_ balance         _-_ out
    _u_ undo            _i_ heighten        _+_ in
    _r_ redo            _j_ narrow          _=_ reset
    ^^                  _k_ lower           ^^
    ^^                  _l_ widen           ^^
    ^^                  ^^                  ^^
    "
    ("q" nil)
    ("b" balance-windows)
    ("i" enlarge-window)
    ("j" shrink-window-horizontally)
    ("k" shrink-window)
    ("l" enlarge-window-horizontally)
    ("-" text-scale-decrease)
    ("+" text-scale-increase)
    ("u" winner-undo)
    ("r" winner-redo)
    ("=" (text-scale-increase 0)))


  #+END_SRC

**** Org
#+BEGIN_SRC emacs-lisp :tangle yes

(defhydra hydra-org (:color red :columns 3)
  "Org Mode Movements"
  ("n" outline-next-visible-heading "next heading")
  ("p" outline-previous-visible-heading "prev heading")
  ("N" org-forward-heading-same-level "next heading at same level")
  ("P" org-backward-heading-same-level "prev heading at same level")
  ("u" outline-up-heading "up heading")
  ("g" org-goto "goto" :exit t))

#+END_SRC

**** Dired

#+BEGIN_SRC emacs-lisp :tangle yes

(defhydra hydra-dired (:hint nil :color pink)
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue))


#+END_SRC

**** Multiple Cursor

#+BEGIN_SRC emacs-lisp

(defhydra multiple-cursors-hydra (:hint nil)
  "
     ^Up^            ^Down^        ^Other^
----------------------------------------------
[_p_]   Next    [_n_]   Next    [_l_] Edit lines
[_P_]   Skip    [_N_]   Skip    [_a_] Mark all
[_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
^ ^             ^ ^             [_q_] Quit
"
  ("l" mc/edit-lines :exit t)
  ("a" mc/mark-all-like-this :exit t)
  ("n" mc/mark-next-like-this)
  ("N" mc/skip-to-next-like-this)
  ("M-n" mc/unmark-next-like-this)
  ("p" mc/mark-previous-like-this)
  ("P" mc/skip-to-previous-like-this)
  ("M-p" mc/unmark-previous-like-this)
  ("r" mc/mark-all-in-region-regexp :exit t)
  ("q" nil))

#+END_SRC

*** Twitter


Twitter mode!

Also, I saw this tos show images (https://github.com/hayamiz/twittering-mode/issues/136)

But not working exactly as expected... so I will try to do it by myself!

#+BEGIN_SRC emacs-lisp :tangle yes
  (defun swizzle-twitter-to-load-images ()
    (defun *twittering-generate-format-table (status-sym prefix-sym)
      `(("%" . "%")
        ("}" . "}")
        ("#" . (cdr (assq 'id ,status-sym)))
        ("'" . (when (cdr (assq 'truncated ,status-sym))
                 "..."))
        ("c" .
         (let ((system-time-locale "C"))
           (format-time-string "%a %b %d %H:%M:%S %z %Y"
                               (cdr (assq 'created-at ,status-sym)))))
        ("d" . (cdr (assq 'user-description ,status-sym)))
        ("f" .
         (twittering-make-string-with-source-property
          (cdr (assq 'source ,status-sym)) ,status-sym))
        ("i" .
         (when (and twittering-icon-mode window-system)
           (let ((url
                  (cond
                   ((and twittering-use-profile-image-api
                         (eq twittering-service-method 'twitter)
                         (or (null twittering-convert-fix-size)
                             (member twittering-convert-fix-size '(48 73))))
                    (let ((user (cdr (assq 'user-screen-name ,status-sym)))
                          (size
                           (if (or (null twittering-convert-fix-size)
                                   (= 48 twittering-convert-fix-size))
                               "normal"
                             "bigger")))
                      (format "http://%s/%s/%s.xml?size=%s" twittering-api-host
                              (twittering-api-path "users/profile_image") user size)))
                   (t
                    (cdr (assq 'user-profile-image-url ,status-sym))))))
             (twittering-make-icon-string nil nil url))))
        ("I" .
         (let* ((entities (cdr (assq 'entity ,status-sym)))
                text)
           (mapc (lambda (url-info)
                   (setq text (or (cdr (assq 'media-url url-info)) "")))
                 (cdr (assq 'media entities)))
           (if (string-equal "" text)
               text
             (let ((twittering-convert-fix-size 360))
               (twittering-make-icon-string nil nil text)))))
        ("j" . (cdr (assq 'user-id ,status-sym)))
        ("L" .
         (let ((location (or (cdr (assq 'user-location ,status-sym)) "")))
           (unless (string= "" location)
             (concat " [" location "]"))))
        ("l" . (cdr (assq 'user-location ,status-sym)))
        ("p" . (when (cdr (assq 'user-protected ,status-sym))
                 "[x]"))
        ("r" .
         (let ((reply-id (or (cdr (assq 'in-reply-to-status-id ,status-sym)) ""))
               (reply-name (or (cdr (assq 'in-reply-to-screen-name ,status-sym))
                               ""))
               (recipient-screen-name
                (cdr (assq 'recipient-screen-name ,status-sym))))
           (let* ((pair
                   (cond
                    (recipient-screen-name
                     (cons (format "sent to %s" recipient-screen-name)
                           (twittering-get-status-url recipient-screen-name)))
                    ((and (not (string= "" reply-id))
                          (not (string= "" reply-name)))
                     (cons (format "in reply to %s" reply-name)
                           (twittering-get-status-url reply-name reply-id)))
                    (t nil)))
                  (str (car pair))
                  (url (cdr pair))
                  (properties
                   (list 'mouse-face 'highlight 'face 'twittering-uri-face
                         'keymap twittering-mode-on-uri-map
                         'uri url
                         'front-sticky nil
                         'rear-nonsticky t)))
             (when (and str url)
               (concat " " (apply 'propertize str properties))))))
        ("R" .
         (let ((retweeted-by
                (or (cdr (assq 'retweeting-user-screen-name ,status-sym)) "")))
           (unless (string= "" retweeted-by)
             (concat " (retweeted by " retweeted-by ")"))))
        ("S" .
         (twittering-make-string-with-user-name-property
          (cdr (assq 'user-name ,status-sym)) ,status-sym))
        ("s" .
         (twittering-make-string-with-user-name-property
          (cdr (assq 'user-screen-name ,status-sym)) ,status-sym))
        ("U" .
         (twittering-make-fontified-tweet-unwound ,status-sym))
        ;; ("D" .
        ;;  (twittering-make-fontified-tweet-unwound ,status-sym))
        ("T" .
         ,(twittering-make-fontified-tweet-text
           `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
           twittering-regexp-hash twittering-regexp-atmark))
        ("t" .
         ,(twittering-make-fontified-tweet-text
           `(twittering-make-fontified-tweet-text-with-entity ,status-sym)
           twittering-regexp-hash twittering-regexp-atmark))
        ("u" . (cdr (assq 'user-url ,status-sym)))))

        (advice-add #'twittering-generate-format-table :override #'*twittering-generate-format-table))

#+END_SRC


#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package twittering-mode
    :ensure t
    :commands twit
    :bind
    ("C-c a t" . twit)
    :config
    (swizzle-twitter-to-load-images)
    (setq twittering-use-master-password t
        twittering-icon-mode t
        twittering-use-icon-storage t
        twittering-convert-fix-size 20
        twittering-initial-timeline-spec-string '(":home")
        twittering-edit-skeleton 'inherit-any
        twittering-display-remaining t
        twittering-fill-column 80
        twittering-status-format "%i %FACE[font-lock-function-name-face]{@%s (%S)}  %FACE[italic]{%@}  %FACE[error]{%FIELD-IF-NONZERO[❤ %d]{favorite_count}}  %FACE[warning]{%FIELD-IF-NONZERO[↺ %d]{retweet_count}} %RT{RT by %s}
%FOLD[ ]{%FILL{%t}
%I
%QT{
%FOLD[   ]{%i %FACE[font-lock-function-name-face]{@%s}\t%FACE[shadow]{%@}
%FOLD[   ]{%FILL{%t}}
}}}
"))
#+END_SRC

Twitter images :)

#+BEGIN_SRC emacs-lisp :tangle


#+END_SRC


*** Strip white spaces after save

#+BEGIN_SRC emacs-lisp

(add-hook 'before-save-hook 'delete-trailing-whitespace)

#+END_SRC

*** Workspaces2

 - C-c w c: create a new workspace
 - C-c w v: go to workspace


#+BEGIN_SRC emacs-lisp

(use-package workgroups2
  :ensure t
  :diminish workgroups-mode
  :init
  (setq wg-prefix-key (kbd "C-c w")
        wg-session-file "~/.emacs.d/workgroups2"
        wg-mode-line-display-on nil
        ;; What to do on Emacs exit / workgroups-mode exit?
        wg-emacs-exit-save-behavior           'save      ; Options: 'save 'ask nil
        wg-workgroups-mode-exit-save-behavior 'save)
  (workgroups-mode 1))

#+END_SRC

*** LSP (Language server protocol)

From: https://github.com/akirak/emacs.d/blob/master/coding/init-lsp.el

#+BEGIN_SRC emacs-lisp
(use-package lsp-mode)

(use-package company-lsp
  :after (lsp-mode company)
  :init
  (add-hook 'company-backends 'company-lsp))

(use-package lsp-ui
  :after lsp
  :config
  (company-mode 1)
  (add-hook 'lsp-ui-doc-mode-hook
            (lambda () (when lsp-ui-doc-mode (eldoc-mode -1))))
  (add-hook 'lsp-ui-mode-hook 'lsp-ui-doc-enable)
  :hook
  (lsp-after-open . (lambda () (lsp-ui-mode 1))))

#+END_SRC

*** Interaction Log (Show keybindings!)\

Show what are you doing on your emacs :)

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun toggle-interaction-log ()
    (interactive)
    (interaction-log-mode)
    (pop-to-buffer "*Emacs Log*"))

  (use-package interaction-log
    :defer
    :bind
    ("C-h l" . toggle-interaction-log))


#+END_SRC

** Languages
*** Javascrip
**** RJSX
 I'm not using js2-refactor and tern-mode because seems that I don't need them, using tide
 which seems pretty ok and do all of this :)

 Interesting things:

  - M-? => Find references in JS
  - M-. => Go to Definition
  - M-, => Return to the last point on definition
  - C-! => Flycheck should be active with eslint in the current project

 #+BEGIN_SRC emacs-lisp :tangle yes
   (defun use-eslint-from-node-modules ()
     (let* ((root (locate-dominating-file
                   (or (buffer-file-name) default-directory)
                   "node_modules"))
            (eslint (and root
                         (expand-file-name "node_modules/eslint/bin/eslint.js"
                                           root))))
       (when (and eslint (file-executable-p eslint))
         (setq-local flycheck-javascript-eslint-executable eslint))))

   (defun onJavascriptMode ()
     (message "on Javascript!")

     ;; Fucking better indentation
     (local-set-key (kbd "TAB") 'js2-indent-bounce)
     (local-set-key (kbd "<backtab>") 'js2-indent-bounce-backward)

     ;;
     (indium-interaction-mode 1)

     ;; flycheck with eslint
     (flycheck-mode 1)
     (use-eslint-from-node-modules)
     (flycheck-select-checker 'javascript-eslint)
     (flycheck-disable-checker 'javascript-jshint)


     ;; TIDE
     (tide-mode 1)
     (flycheck-add-next-checker 'javascript-eslint 'javascript-tide 'append)
     (setup-tide-mode))


   (use-package flycheck
     :defer t)

   (use-package rjsx-mode
     :mode ("\\.jsx?\\'" . rjsx-mode)
     :config
     (message "RJSX on Config")
     ;; JS2 config
     (setq js2-idle-timer-delay 1)
     (setq js-indent-level 2)
     (setq js-switch-indent-offset 2)
     (setq js2-bounce-indent-p t)
     (setq js2-basic-offset 2)
     (add-hook 'js2-mode-hook 'onJavascriptMode)
     :init
     (message "RJSX on init"))


 #+END_SRC

**** Indium (chrome/node) debugger

#+BEGIN_SRC emacs-lisp :tangle yes

  (use-package indium
    :commands (indium-interaction-mode)
    :config
    (add-hook 'js-mode-hook #'indium-interaction-mode))

#+END_SRC

**** JEST (mocha modified)

 Jest testing :) I found this gem on https://github.com/scottaj/mocha.el/issues/3

 Actually is hack (an advice) added to already mode named mocha.el

 TODO: Search how to use indium! and be able to debug!!!

 #+BEGIN_SRC emacs-lisp :tangle yes

 (use-package mocha
   :ensure t
   :commands (mocha-test-project
              mocha-debug-project
              mocha-test-file
              mocha-debug-file
              mocha-test-at-point
              mocha-debug-at-point)
   :config
   ;; Clear up stray ansi escape sequences.
   (defvar jj*--mocha-ansi-escape-sequences
     ;; https://emacs.stackexchange.com/questions/18457/stripping-stray-ansi-escape-sequences-from-eshell
     (rx (or
          "^[\\[[0-9]+[a-z]"
          "�[1A"
          "�[999D")))

   (defun jj*--mocha-compilation-filter ()
     "Filter function for compilation output."
     (ansi-color-apply-on-region compilation-filter-start (point-max))
     (save-excursion
       (goto-char compilation-filter-start)
       (while (re-search-forward jj*--mocha-ansi-escape-sequences nil t)
         (replace-match ""))))

   (advice-add 'mocha-compilation-filter :override 'jj*--mocha-compilation-filter)

   ;; https://github.com/scottaj/mocha.el/issues/3
   (defcustom mocha-jest-command "node_modules/jest/bin/jest.js --colors"
     "The path to the jest command to run."
     :type 'string
     :group 'mocha)

   (defun mocha-generate-command--jest-command (debug &optional filename testname)
     "Generate a command to run the test suite with jest.
 If DEBUG is true, then make this a debug command.
 If FILENAME is specified run just that file otherwise run
 MOCHA-PROJECT-TEST-DIRECTORY.
 IF TESTNAME is specified run jest with a pattern for just that test."
     (let ((target (if testname (concat " --testNamePattern \"" testname "\"") ""))
           (path (if (or filename mocha-project-test-directory)
                     (concat " --testPathPattern \""
                             (if filename filename mocha-project-test-directory)
                             "\"")
                   ""))
           (node-command
            (concat mocha-which-node
                    (if debug (concat " --debug=" mocha-debug-port) ""))))
       (concat node-command " "
               mocha-jest-command
               target
               path)))

   (advice-add 'mocha-generate-command
               :override 'mocha-generate-command--jest-command))

 #+END_SRC

 Found on reddit: ( https://www.reddit.com/r/emacs/comments/8e24t9/writing_reactjsx_in_2018_what_addons_do_you_all/ )
 rjsx author here. I personally use rjsx + js2 for syntax highlighting and imenu,
 tide for completion (with company), eldoc support, goto definition, find references,
 and global renaming, flycheck for ESLint support, js2-refactor for local refactoring,
 js2-highlight-vars for highlighting variable at point, nvm.el for managing node versions,
 and mocha.el for testing (hacked to support jest).

 Are there other features of VS Code you're missing? Would love to hear about them!

**** Tide

Tide allow you to use vscode backend for goto definition, reorganize imports, find ref etc...

https://github.com/ananthakumaran/tide/issues/211


#+BEGIN_SRC emacs-lisp :tangle yes

  (defun setup-tide-mode ()
    (interactive)
    (setq tide-tsserver-process-environment '("TSS_LOG=-level verbose -file /tmp/tss.log"))
    (tide-setup)
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))

  (use-package tide
    :ensure t
    :bind (:map tide-mode-map
            ("M-?" . tide-references))
    :config
    (setup-tide-mode))
#+END_SRC

**** eslint fix

Fix eslint after save :)
#+BEGIN_SRC emacs-lisp


  (defun eslint-fix-file ()
    (interactive)
    (message "eslint --fixing the file" (buffer-file-name))
    (shell-command (concat flycheck-javascript-eslint-executable " --fix " (buffer-file-name))))

  (defun eslint-fix-file-and-revert ()
    (interactive)
    (eslint-fix-file)
    (revert-buffer t t))

  (add-hook 'js2-mode-hook
            (lambda ()
  (add-hook 'after-save-hook #'eslint-fix-file-and-revert nil t)))

#+END_SRC

*** Docker

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package docker
  :ensure t
  :straight t
  :bind ("C-c d" . docker))

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle yes


  (use-package dockerfile-mode
    :init
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))

(straight-use-package
 '(lsp-dockerfile :type git :host github :repo "emacs-lsp/lsp-dockerfile"))
(require 'lsp-dockerfile)
(add-hook 'dockerfile-mode-hook #'lsp-dockerfile-enable)

#+END_SRC

*** Python

#+BEGIN_SRC emacs-lisp :tangle yes

  (defun onPython ()
    (message "onPython")
    (lsp-python-enable)
    (flycheck-mode 1))

  (use-package lsp-python)
  (require 'lsp-python)
  (add-hook 'python-mode-hook #'onPython)

#+END_SRC

** TODO

*** Evil ?????

I want evil just for movement but not for anything else...

#+BEGIN_SRC emacs-lisp :tangle yes

(use-package evil)

#+END_SRC

For the moment I install the package but not used by default but
you need to start it by M-x evil-mode

Also found this for better having some keybindings from emacs like
C-e and C-f etc...
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package evil
  :config
  (define-key evil-normal-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-insert-state-map "\C-e" 'end-of-line)
  (define-key evil-visual-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-motion-state-map "\C-e" 'evil-end-of-line)
  (define-key evil-normal-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-insert-state-map "\C-f" 'evil-forward-char)
  (define-key evil-normal-state-map "\C-b" 'evil-backward-char)
  (define-key evil-insert-state-map "\C-b" 'evil-backward-char)
  (define-key evil-visual-state-map "\C-b" 'evil-backward-char)
  (define-key evil-normal-state-map "\C-d" 'evil-delete-char)
  (define-key evil-insert-state-map "\C-d" 'evil-delete-char)
  (define-key evil-visual-state-map "\C-d" 'evil-delete-char)
  (define-key evil-normal-state-map "\C-n" 'evil-next-line)
  (define-key evil-insert-state-map "\C-n" 'evil-next-line)
  (define-key evil-visual-state-map "\C-n" 'evil-next-line)
  (define-key evil-normal-state-map "\C-p" 'evil-previous-line)
  (define-key evil-insert-state-map "\C-p" 'evil-previous-line)
  (define-key evil-visual-state-map "\C-p" 'evil-previous-line)
  (define-key evil-normal-state-map "\C-w" 'evil-delete)
  (define-key evil-insert-state-map "\C-w" 'evil-delete)
  (define-key evil-visual-state-map "\C-w" 'evil-delete)
  (define-key evil-normal-state-map "\C-y" 'yank)
  (define-key evil-insert-state-map "\C-y" 'yank)
  (define-key evil-visual-state-map "\C-y" 'yank)
  (define-key evil-normal-state-map "\C-k" 'kill-line)
  (define-key evil-insert-state-map "\C-k" 'kill-line)
  (define-key evil-visual-state-map "\C-k" 'kill-line))

#+END_SRC

*** Treemacs
#+BEGIN_SRC emacs-lisp :tangle yes


(use-package treemacs
  :ensure t
  :bind
  (:map global-map
        ("M-0" . treemacs)))

#+END_SRC
